{"version":3,"file":"paymail-client.esm.js","sources":["../src/constants.js","../src/dns-client.js","../src/dns-over-https.js","../src/http.js","../src/EndpointResolver.js","../src/VerifiableMessage.js","../src/RequestBodyFactory.js","../src/Clock.js","../src/errors/PaymailNotFound.js","../src/BrowserDns.js","../src/errors/ProtocolNotSupported.js","../src/errors/AssetNotAccepted.js","../src/errors/AuthoriserNotFound.js","../src/PaymailClient.js"],"sourcesContent":["import { brfc } from '@moneybutton/brfc'\n\nexport const CapabilityCodes = {\n  pki: 'pki',\n  paymentDestination: 'paymentDestination',\n  requestSenderValidation: brfc(\n    'bsvalias Payment Addressing (Payer Validation)',\n    ['andy (nChain)'],\n    ''\n  ),\n  verifyPublicKeyOwner: brfc(\n    'bsvalias public key verify (Verify Public Key Owner)',\n    [],\n    ''\n  ),\n  publicProfile: brfc(\n    'Public Profile (Name & Avatar)',\n    ['Ryan X. Charles (Money Button)'],\n    '1'\n  ),\n  receiveTransaction: brfc(\n    'Send raw transaction',\n    ['Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)'],\n    '1.1'\n  ),\n  p2pPaymentDestination: brfc(\n    'Get no monitored payment destination (p2p payment destination)',\n    ['Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)'],\n    '1.1'\n  ),\n  assetInformation: brfc(\n    'Asset Information',\n    ['Fabriik'],\n    '1'\n  ),\n  p2pPaymentDestinationWithTokensSupport: brfc(\n    'P2P Payment Destination with Tokens Support',\n    ['Fabriik'],\n    '1'\n  ),\n  sfpBuildAction: brfc(\n    'Simple Fabriik Protocol for Tokens Build Action',\n    ['Fabriik'],\n    '1'\n  ),\n  sfpAuthoriseAction: brfc(\n    'Simple Fabriik Protocol for Tokens Authorise Action',\n    ['Fabriik'],\n    '1'\n  )\n}\n","// import { DnsOverHttps } from \"./dns-over-https\"\n\nclass DnsClient {\n  constructor (dns, doh) {\n    this.dns = dns\n    this.doh = doh\n  }\n\n  async checkSrv (aDomain) {\n    return new Promise((resolve, reject) => {\n      this.dns.resolveSrv(`_bsvalias._tcp.${aDomain}`, async (err, result) => {\n        try {\n          if (err && (err.code === 'ENODATA' || err.code === 'ENOTFOUND')) {\n            return resolve({\n              domain: aDomain,\n              port: 443,\n              isSecure: true\n            })\n          }\n          if (err) {\n            return reject(err)\n          }\n\n          const { name: domainFromDns, port, isSecure } = result[0]\n          resolve({\n            domain: domainFromDns,\n            port,\n            isSecure: this.checkDomainIsSecure(domainFromDns, aDomain) || isSecure\n          })\n        } catch (err) {\n          return reject(err)\n        }\n      })\n    }).then(result => {\n      if (result.isSecure) {\n        return result\n      } else {\n        return this.validateDnssec(aDomain)\n      }\n    }, (err) => {\n      console.error(err)\n      return err\n    })\n  }\n\n  checkDomainIsSecure (srvResponseDomain, originalDomain) {\n    if (this.domainsAreEqual(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.responseIsWwwSubdomain(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.isHandcashDomain(originalDomain)) { // tell rafa to fix handcash and we can remove the special case :)\n      return this.domainsAreEqual('handcash-paymail-production.herokuapp.com', srvResponseDomain) || this.domainsAreEqual('handcash-cloud-production.herokuapp.com', srvResponseDomain)\n    } else if (this.isHandcashInternalDomain(originalDomain)) {\n      return this.domainsAreEqual('handcash-cloud-staging.herokuapp.com', srvResponseDomain)\n    } else if (this.domainsAreEqual('localhost', srvResponseDomain)) {\n      return true\n    } else if (this.isMoneyButtonDomain(srvResponseDomain)) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  isMoneyButtonDomain (aDomain) {\n    return this.domainsAreEqual(aDomain, 'moneybutton.com') || this.domainsAreEqual(aDomain, 'www.moneybutton.com')\n  }\n\n  responseIsWwwSubdomain (srvResponseDomain, originalDomain) {\n    return this.domainsAreEqual(srvResponseDomain, `www.${originalDomain}`)\n  }\n\n  isHandcashDomain (aDomain) {\n    return this.domainsAreEqual('handcash.io', aDomain)\n  }\n\n  isHandcashInternalDomain (aDomain) {\n    return this.domainsAreEqual('internal.handcash.io', aDomain)\n  }\n\n  async validateDnssec (aDomain) {\n    const dnsResponse = await this.doh.queryBsvaliasDomain(aDomain)\n    if (dnsResponse.Status !== 0 || !dnsResponse.Answer) {\n      throw new Error(`Insecure domain.`)\n    }\n    const data = dnsResponse.Answer[0].data.split(' ')\n    const port = data[2]\n    const responseDomain = data[3]\n    if (!dnsResponse.AD && !this.domainsAreEqual(aDomain, responseDomain)) {\n      throw new Error(`Insecure domain.`)\n    }\n    return {\n      port,\n      domain: responseDomain,\n      isSecure: dnsResponse.AD\n    }\n  }\n\n  domainsAreEqual (domain1, domain2) {\n    return domain1.replace(/\\.$/, '') === domain2.replace(/\\.$/, '')\n  }\n}\n\nexport { DnsClient }\n","class DnsOverHttps {\n  constructor (fetch, config) {\n    this.fetch = fetch\n    this.config = config\n  }\n\n  async resolveSrv (aDomain) {\n    const response = await this.fetch(`${this.config.baseUrl}?name=${aDomain}&type=SRV&cd=0`)\n    const body = await response.json()\n    return body\n  }\n\n  async queryBsvaliasDomain (aDomain) {\n    return this.resolveSrv(`_bsvalias._tcp.${aDomain}`)\n  }\n}\n\nexport { DnsOverHttps }\n","import AbortController from 'abort-controller'\n\nclass Http {\n  constructor (fetch) {\n    this.fetch = fetch\n  }\n\n  async get (url) {\n    return this._basicRequest(url)\n  }\n\n  async postJson (url, body) {\n    return this._basicRequest(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    })\n  }\n\n  async _basicRequest (url, options = {}) {\n    var controller = new AbortController()\n    const timer = setTimeout(() => controller.abort(), 30000)\n    return this.fetch(url, {\n      ...options,\n      credentials: 'omit',\n      signal: controller.signal\n    }).then(result => {\n      clearTimeout(timer)\n      return result\n    })\n  }\n}\n\nexport { Http }\n","import { CapabilityCodes } from './constants'\nimport { DnsClient } from './dns-client'\nimport { DnsOverHttps } from './dns-over-https'\nimport { Http } from './http'\n\nclass EndpointResolver {\n  constructor (dns = null, fetch) {\n    this.dnsClient = new DnsClient(dns, new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' }))\n\n    this.http = new Http(fetch)\n    this._cache = {}\n  }\n\n  static create (dnsClient, fetch) {\n    const instance = new EndpointResolver(null, fetch)\n    instance.dnsClient = dnsClient\n    return instance\n  }\n\n  async getIdentityUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.pki)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const identityUrl = apiDescriptor.capabilities.pki\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return identityUrl\n  }\n\n  async getAddressUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.paymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const addressUrl = apiDescriptor.capabilities.paymentDestination\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return addressUrl\n  }\n\n  async getVerifyUrlFor (aPaymail, aPubkey) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.verifyPublicKeyOwner)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.verifyPublicKeyOwner]\n      .replace('{alias}', alias).replace('{domain.tld}', domain).replace('{pubkey}', aPubkey)\n    return url\n  }\n\n  async getPublicProfileUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.publicProfile)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.publicProfile]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getSendTxUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.receiveTransaction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.receiveTransaction]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getP2pPaymentDestinationUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestination]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getP2pPaymentDestinationWithTokensSupportUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestinationWithTokensSupport)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestinationWithTokensSupport]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getSfpBuildActionUrlFor (aPaymail) {\n    const [, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.sfpBuildAction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.sfpBuildAction]\n    return url\n  }\n\n  async getSfpAuthoriseActionUrlFor (aPaymail) {\n    const [, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.sfpAuthoriseAction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.sfpAuthoriseAction]\n    return url\n  }\n\n  async getAssetInformationUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.assetInformation)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.assetInformation]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async domainHasCapability (aDomain, capability) {\n    const apiDescriptor = await this.getApiDescriptionFor(aDomain)\n    return !!apiDescriptor.capabilities[capability]\n  }\n\n  async getApiDescriptionFor (aDomain) {\n    if (this._cache[aDomain]) {\n      return this._cache[aDomain]\n    }\n    const { domain, port } = await this.getWellKnownBaseUrl(aDomain)\n    const apiDescriptor = this.fetchApiDescriptor(domain, port)\n    this._cache[aDomain] = apiDescriptor\n    return apiDescriptor\n  }\n\n  async fetchApiDescriptor (domain, port) {\n    const protocol = (domain === 'localhost' || domain === 'localhost.') ? 'http' : 'https'\n    const requestPort = port.toString() === '443' ? '' : `:${port}`\n    const requestDomain = /^(.*?)\\.?$/.exec(domain)[1] // Get value from capture group\n    if (!requestDomain) {\n      throw new Error(`Invalid domain: ${domain}`)\n    }\n    const wellKnown = await this.http.get(`${protocol}://${requestDomain}${requestPort}/.well-known/bsvalias`)\n    const apiDescriptor = await wellKnown.json()\n    return apiDescriptor\n  }\n\n  async getWellKnownBaseUrl (aDomain) {\n    return this.dnsClient.checkSrv(aDomain)\n  }\n\n  async ensureCapabilityFor (aDomain, aCapability) {\n    if (!await this.domainHasCapability(aDomain, aCapability)) {\n      throw new Error(`Unknown capability \"${aCapability}\" for \"${aDomain}\"`)\n    }\n  }\n}\n\nexport { EndpointResolver }\n","class VerifiableMessage {\n  constructor (parts, bsv = null) {\n    if (bsv === null) {\n      bsv = require('bsv')\n    }\n    this.bsv = bsv\n    this.concatenated = Buffer.from(parts.join(''))\n  }\n\n  static forBasicAddressResolution ({\n    senderHandle,\n    amount,\n    dt,\n    purpose\n  }) {\n    if (dt.toISOString) {\n      dt = dt.toISOString()\n    }\n\n    return new VerifiableMessage([\n      senderHandle,\n      amount || '0',\n      dt,\n      purpose\n    ])\n  }\n\n  sign (wifPrivKey) {\n    let privKey = this.bsv.PrivKey.fromWif(wifPrivKey)\n    let keyPair = this.bsv.KeyPair.fromPrivKey(privKey)\n    return this.bsv.Bsm.sign(this.concatenated, keyPair)\n  }\n\n  verify (keyAddress, signature) {\n    return this.bsv.Bsm.verify(this.concatenated, signature, this.bsv.Address.fromString(keyAddress))\n  }\n}\n\nexport { VerifiableMessage }\n","import { VerifiableMessage } from './VerifiableMessage'\n\nclass RequestBodyFactory {\n  constructor (clock) {\n    this.clock = clock\n  }\n  buildBodyToRequestAddress (senderInfo, privateKey = null) {\n    const {\n      senderHandle,\n      amount,\n      senderName,\n      purpose,\n      pubkey,\n      signature: providedSignature\n    } = senderInfo\n\n    if (!providedSignature && privateKey === null) {\n      throw new Error('Missing private key or signature')\n    }\n\n    let dt, signature\n    if (providedSignature) {\n      if (!senderInfo.dt) {\n        throw new Error('missing datetime for given signature')\n      }\n      dt = senderInfo.dt\n      signature = providedSignature\n    } else {\n      dt = this.clock.now()\n      signature = VerifiableMessage.forBasicAddressResolution({\n        senderHandle,\n        amount,\n        dt,\n        purpose\n      }).sign(privateKey)\n    }\n\n    return {\n      senderHandle,\n      senderName,\n      purpose,\n      dt,\n      amount: amount || null,\n      pubkey,\n      signature\n    }\n  }\n\n  buildBodySendTx (hexTransaction, reference, metadata) {\n    return { hex: hexTransaction, metadata, reference }\n  }\n\n  buildBodyP2pPaymentDestination (satoshis) {\n    return { satoshis }\n  }\n}\n\nexport { RequestBodyFactory }\n","import moment from 'moment'\n\nclass Clock {\n  now () {\n    return moment()\n  }\n}\n\nexport { Clock }\n","class PaymailNotFound extends Error {\n  constructor (message, paymail) {\n    super(message)\n    this.paymail = paymail\n  }\n}\n\nexport { PaymailNotFound }\n","import { DnsOverHttps } from './dns-over-https'\n\nclass BrowserDns {\n  constructor (fetch) {\n    this.doh = new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' })\n  }\n\n  async resolveSrv (aDomain, aCallback) {\n    try {\n      const response = await this.doh.resolveSrv(aDomain)\n      if (response.Status === 0 && response.Answer) {\n        const data = response.Answer.map(record => {\n          const [ priority, weight, port, name ] = record.data.split(' ')\n          return {\n            priority,\n            weight,\n            port,\n            name,\n            isSecure: response.AD\n          }\n        })\n        aCallback(null, data)\n      } else if (response.Status === 3 || !response.Answer) {\n        aCallback({ code: 'ENODATA' })\n      } else {\n        aCallback(new Error('error during dns query'))\n      }\n    } catch (e) {\n      aCallback(e)\n    }\n  }\n}\n\nexport { BrowserDns }\n","class ProtocolNotSupported extends Error {\n  constructor (message, protocol) {\n    super(message)\n    this.protocol = protocol\n  }\n}\n\nexport { ProtocolNotSupported }\n","class AssetNotAccepted extends Error {\n  constructor (message, asset) {\n    super(message)\n    this.asset = asset\n  }\n}\n\nexport { AssetNotAccepted }\n","class AuthoriserNotFound extends Error {\n  constructor (message, domain) {\n    super(message)\n    this.domain = domain\n  }\n}\n\nexport { AuthoriserNotFound }\n","import { EndpointResolver } from './EndpointResolver'\nimport { VerifiableMessage } from './VerifiableMessage'\nimport { RequestBodyFactory } from './RequestBodyFactory'\nimport { Clock } from './Clock'\nimport { PaymailNotFound } from './errors/PaymailNotFound'\nimport { CapabilityCodes } from './constants'\nimport fetch from 'isomorphic-fetch'\nimport { BrowserDns } from './BrowserDns'\nimport { Http } from './http'\nimport HttpStatus from 'http-status-codes'\nimport { ProtocolNotSupported } from './errors/ProtocolNotSupported'\nimport { AssetNotAccepted } from './errors/AssetNotAccepted'\nimport { AuthoriserNotFound } from './errors/AuthoriserNotFound'\n\nclass PaymailClient {\n  constructor (dns = null, fetch2 = null, clock = null, bsv = null) {\n    if (fetch2 === null) {\n      fetch2 = fetch\n    }\n    if (dns === null) {\n      dns = new BrowserDns(fetch2)\n    }\n    if (bsv === null) {\n      bsv = require('bsv')\n    }\n    this.bsv = bsv\n    this.resolver = new EndpointResolver(dns, fetch2)\n    this.http = new Http(fetch2)\n    this.requestBodyFactory = new RequestBodyFactory(clock !== null ? clock : new Clock())\n    this.VerifiableMessage = VerifiableMessage\n  }\n\n  /**\n   * Uses pki flow to query for an identity key for a given paymail address.\n   *\n   * @param {String} paymail - a paymail address\n   */\n  async getPublicKey (paymail) {\n    const identityUrl = await this.resolver.getIdentityUrlFor(paymail)\n    const response = await this.http.get(identityUrl)\n    const { pubkey } = await response.json()\n    return pubkey\n  }\n\n  /**\n   * Uses `Basic Address Resolution` flow to query for a payment for output for the\n   * given paymail address.\n   *\n   * @param {String} aPaymail - a paymail address\n   * @param {Object} senderInfo - Object containing sender info\n   * @param {String} senderInfo.senderHandle - Sender paymail address\n   * @param {String} senderInfo.amount - Optional. Required amount.\n   * @param {String} senderInfo.senderName - Optional. Sender name.\n   * @param {String} senderInfo.purpose - Optional. Purpose of the payment.\n   * @param {String} senderInfo.pubkey - Optional. Public key used to sign the message.\n   * @param {String} senderInfo.signature - Optional. Valid signature according to paymail specification.\n   * @param {String} privateKey - Optional. private key to sign the request.\n   */\n  async getOutputFor (aPaymail, senderInfo, privateKey = null) {\n    const addressUrl = await this.resolver.getAddressUrlFor(aPaymail)\n    const response = await this.http.postJson(\n      addressUrl,\n      this.requestBodyFactory.buildBodyToRequestAddress(senderInfo, privateKey)\n    )\n    if (!response.ok) {\n      throw new PaymailNotFound(`Paymail not found: ${aPaymail}`, aPaymail)\n    }\n    const { output } = await response.json()\n    return output\n  }\n\n  /**\n   * Verify if the given public address belongs to the given\n   * paymail address.\n   *\n   * @param {String} pubkey - Public key to check.\n   * @param {String} paymail - a paymail address\n   */\n  async verifyPubkeyOwner (pubkey, paymail) {\n    const url = await this.resolver.getVerifyUrlFor(paymail, pubkey)\n    const response = await this.http.get(url)\n    const body = await response.json()\n    const { match } = body\n    return match\n  }\n\n  /**\n   * Verifies if a given signature is valid for a given message. It uses\n   * different strategies depending on the capabilities of the server\n   * and the parameters Given. The priority order is.\n   * - If paymail is not provided, then normal signature verification is performed.\n   * - Use provided key (and check that belongs to given paymail address).\n   * - Get a new pubkey for given paymail address using pki.\n   * - If there is no way to intereact with the owner of the domain to verify the public key it returns false.\n   *\n   * @param {Message} message - Message to verify\n   * @param {String} signature - Signature\n   * @param {String} paymail - Signature owner paymail\n   * @param {String} pubkey - Optional. Public key that validates the signature.\n   */\n  async isValidSignature (message, signature, paymail = null, pubkey = null) {\n    if (paymail == null && pubkey === null) {\n      throw new Error('Must specify either paymail or pubkey')\n    }\n    let senderPubKey\n    if (paymail) {\n      if (pubkey && await this.resolver.domainHasCapability(paymail.split('@')[1], CapabilityCodes.verifyPublicKeyOwner)) {\n        if (await this.verifyPubkeyOwner(pubkey, paymail)) {\n          senderPubKey = this.bsv.PubKey.fromString(pubkey)\n        } else {\n          return false\n        }\n      } else {\n        const hasPki = await this.resolver.domainHasCapability(paymail.split('@')[1], CapabilityCodes.pki)\n        if (hasPki) {\n          const identityKey = await this.getPublicKey(paymail)\n          senderPubKey = this.bsv.PubKey.fromString(identityKey)\n        } else {\n          return false\n        }\n      }\n    }\n\n    const senderKeyAddress = this.bsv.Address.fromPubKey(senderPubKey || pubkey)\n    try {\n      const verified = message.verify(senderKeyAddress.toString(), signature)\n      return verified\n    } catch (err) {\n      // console.log(err)\n      return false\n    }\n  }\n\n  /**\n   * Gets the public profile information using the \"Public Profile\" protocol.\n   *\n   * @param {String} paymail - a paymail address\n   * @param {String} s - the preferred size of the image\n   */\n  async getPublicProfile (paymail) {\n    let publicProfileUrl = await this.resolver.getPublicProfileUrlFor(paymail)\n    const response = await this.http.get(publicProfileUrl)\n    if (!response.ok) {\n      const body = await response.json()\n      throw new Error(`Server failed with: ${JSON.stringify(body)}`)\n    }\n    const { avatar, name } = await response.json()\n    return { avatar, name }\n  }\n\n  async sendRawTx (targetPaymail, hexTransaction, reference, metadata = {}) {\n    if (!hexTransaction) {\n      throw new Error('transaction hex cannot be empty')\n    }\n    let receiveTxUrl = await this.resolver.getSendTxUrlFor(targetPaymail)\n    const response = await this.http.postJson(\n      receiveTxUrl,\n      this.requestBodyFactory.buildBodySendTx(hexTransaction, reference, metadata)\n    )\n    if (!response.ok) {\n      const body = await response.text()\n      throw new Error(`Server failed with: ${body}`)\n    }\n    return response.json()\n  }\n\n  async getP2pPaymentDestination (targetPaymail, satoshis) {\n    if (!satoshis) {\n      throw new Error('Amount in satohis needs to be specified')\n    }\n    let paymentDestinationUrl = await this.resolver.getP2pPaymentDestinationUrlFor(targetPaymail)\n    const response = await this.http.postJson(\n      paymentDestinationUrl,\n      this.requestBodyFactory.buildBodyP2pPaymentDestination(satoshis)\n    )\n    if (!response.ok) {\n      const body = await response.json()\n      throw new Error(`Server failed with: ${JSON.stringify(body)}`)\n    }\n\n    const body = await response.json()\n    if (!body.outputs) {\n      throw new Error('Server answered with a wrong format. Missing outputs')\n    }\n\n    return body\n  }\n\n  async getP2pPaymentDestinationWithTokensSupport (targetPaymail, amount, asset, protocol) {\n    const UNAVAILABLE_FOR_LEGAL_REASONS = 451\n    if (!amount) {\n      throw new Error('Amount needs to be specified')\n    }\n    let paymentDestinationUrl = await this.resolver.getP2pPaymentDestinationWithTokensSupportUrlFor(targetPaymail)\n    const response = await this.http.postJson(\n      paymentDestinationUrl,\n      {\n        amount,\n        asset,\n        protocol\n      }\n    )\n    if (response.status === HttpStatus.NOT_ACCEPTABLE) {\n      throw new ProtocolNotSupported(`Protocol ${protocol} is not supported by paymail ${targetPaymail}`, protocol)\n    }\n    if (response.status === UNAVAILABLE_FOR_LEGAL_REASONS) {\n      throw new AssetNotAccepted(`Paymail ${targetPaymail} cannot accept asset ${asset}`)\n    }\n    if (!response.ok) {\n      const body = await response.json()\n      throw new Error(`Server failed with: ${JSON.stringify(body)}`)\n    }\n\n    const body = await response.json()\n    if (!body.outputs) {\n      throw new Error('Server answered with a wrong format. Missing outputs')\n    }\n\n    return body\n  }\n\n  async sendSfpBuildAction (targetAssetPaymail, params) {\n    let buildActionUrl\n    try {\n      buildActionUrl = await this.resolver.getSfpBuildActionUrlFor(targetAssetPaymail)\n    } catch (err) {\n      if (err.message.includes('Unexpected token')) {\n        throw new AuthoriserNotFound(`Invalid authoriser for ${targetAssetPaymail}`)\n      }\n    }\n    const response = await this.http.postJson(buildActionUrl, params)\n\n    if (!response.ok) {\n      const body = await response.json()\n      throw new Error(body.message)\n    }\n\n    return response.json()\n  }\n\n  async sendSfpAuthoriseAction (targetAssetPaymail, params) {\n    let authoriseActionUrl = await this.resolver.getSfpAuthoriseActionUrlFor(targetAssetPaymail)\n    const response = await this.http.postJson(authoriseActionUrl, params)\n\n    if (!response.ok) {\n      const body = await response.json()\n      throw new Error(body.message)\n    }\n\n    return response.json()\n  }\n\n  async getAssetInformation (assetTargetPaymail) {\n    let assetInformationUrl = await this.resolver.getAssetInformationUrlFor(assetTargetPaymail)\n    const response = await this.http.get(assetInformationUrl)\n\n    if (response.status === HttpStatus.NOT_FOUND) {\n      throw new Error(`Asset ${assetTargetPaymail} was not found`)\n    }\n    if (!response.ok) {\n      const body = await response.text()\n      throw new Error(`Server failed with: ${body}`)\n    }\n\n    return response.json()\n  }\n}\n\nexport { PaymailClient }\n"],"names":["CapabilityCodes","pki","paymentDestination","requestSenderValidation","brfc","verifyPublicKeyOwner","publicProfile","receiveTransaction","p2pPaymentDestination","assetInformation","p2pPaymentDestinationWithTokensSupport","sfpBuildAction","sfpAuthoriseAction","DnsClient","constructor","dns","doh","checkSrv","aDomain","Promise","resolve","reject","resolveSrv","err","result","code","domain","port","isSecure","name","domainFromDns","checkDomainIsSecure","then","validateDnssec","console","error","srvResponseDomain","originalDomain","domainsAreEqual","responseIsWwwSubdomain","isHandcashDomain","isHandcashInternalDomain","isMoneyButtonDomain","dnsResponse","queryBsvaliasDomain","Status","Answer","Error","data","split","responseDomain","AD","domain1","domain2","replace","DnsOverHttps","fetch","config","response","baseUrl","body","json","Http","get","url","_basicRequest","postJson","method","headers","JSON","stringify","options","controller","AbortController","timer","setTimeout","abort","credentials","signal","clearTimeout","EndpointResolver","dnsClient","http","_cache","create","instance","getIdentityUrlFor","aPaymail","alias","ensureCapabilityFor","apiDescriptor","getApiDescriptionFor","identityUrl","capabilities","getAddressUrlFor","addressUrl","getVerifyUrlFor","aPubkey","getPublicProfileUrlFor","getSendTxUrlFor","getP2pPaymentDestinationUrlFor","getP2pPaymentDestinationWithTokensSupportUrlFor","getSfpBuildActionUrlFor","getSfpAuthoriseActionUrlFor","getAssetInformationUrlFor","domainHasCapability","capability","getWellKnownBaseUrl","fetchApiDescriptor","protocol","requestPort","toString","requestDomain","exec","wellKnown","aCapability","VerifiableMessage","parts","bsv","require","concatenated","Buffer","from","join","forBasicAddressResolution","senderHandle","amount","dt","purpose","toISOString","sign","wifPrivKey","privKey","PrivKey","fromWif","keyPair","KeyPair","fromPrivKey","Bsm","verify","keyAddress","signature","Address","fromString","RequestBodyFactory","clock","buildBodyToRequestAddress","senderInfo","privateKey","senderName","pubkey","providedSignature","now","buildBodySendTx","hexTransaction","reference","metadata","hex","buildBodyP2pPaymentDestination","satoshis","Clock","moment","PaymailNotFound","message","paymail","BrowserDns","aCallback","map","record","priority","weight","e","ProtocolNotSupported","AssetNotAccepted","asset","AuthoriserNotFound","PaymailClient","fetch2","resolver","requestBodyFactory","getPublicKey","getOutputFor","ok","output","verifyPubkeyOwner","match","isValidSignature","senderPubKey","PubKey","hasPki","identityKey","senderKeyAddress","fromPubKey","verified","getPublicProfile","publicProfileUrl","avatar","sendRawTx","targetPaymail","receiveTxUrl","text","getP2pPaymentDestination","paymentDestinationUrl","outputs","getP2pPaymentDestinationWithTokensSupport","UNAVAILABLE_FOR_LEGAL_REASONS","status","HttpStatus","NOT_ACCEPTABLE","sendSfpBuildAction","targetAssetPaymail","params","buildActionUrl","includes","sendSfpAuthoriseAction","authoriseActionUrl","getAssetInformation","assetTargetPaymail","assetInformationUrl","NOT_FOUND"],"mappings":"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"}